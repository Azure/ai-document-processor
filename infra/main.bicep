import { modelDeploymentInfo, raiPolicyInfo } from './modules/ai_ml/ai-services.bicep'
import { identityInfo } from './modules/security/managed-identity.bicep'

targetScope = 'subscription'

var tenantId = tenant().tenantId

// Tag settings
// default required tags for azd deployment
var azdTags = { 'azd-env-name': environmentName }

@description('Key-value pairs of tags to assign to all resources. The default azd tags are automatically added.')
param deploymentTags object
var tags = union(azdTags, deploymentTags)

// Environment name. This is automatically set by the 'azd' tool.
@description('Environment name used as a tag for all resources. This is directly mapped to the azd-environment.')
param environmentName string = ''

var abbrs = loadJsonContent('./abbreviations.json')
var roles = loadJsonContent('./roles.json')

@description('Name of the resource group where all resources will be created. When empty, the name is autogenerated.')
param resourceGroupName string
var _resourceGroupName = !empty(resourceGroupName) ? resourceGroupName : '${abbrs.managementGovernance.resourceGroup}-${environmentName}'

var suffix = uniqueString('${location}${_resourceGroupName}${environmentName}')

@description('Identities to assign roles to.')
param identities identityInfo[] = union([], [{
  principalId: principalId
  principalType: 'User'
}])

resource contributorRole 'Microsoft.Authorization/roleDefinitions@2022-05-01-preview' existing = {
  scope: resourceGroup
  name: roles.general.contributor
}

resource appConfigDataOwnerRole 'Microsoft.Authorization/roleDefinitions@2022-05-01-preview' existing = {
  scope: resourceGroup
  name: roles.configuration.appConfigurationDataOwner
}

var appConfigDataOwnerIdentityAssignments = [
  for identity in identities: {
    principalId: identity.principalId
    roleDefinitionId: appConfigDataOwnerRole.id
    principalType: identity.principalType
  }
]

var allConfigDataOwnerIdentityAssignments = concat(appConfigDataOwnerIdentityAssignments, [
  {
    principalId: aiMultiServiceManagedIdentity.outputs.principalId
    roleDefinitionId: appConfigDataOwnerRole.id
    principalType: 'ServicePrincipal'
  }
])

var contributorIdentityAssignments = [
  for identity in identities: {
    principalId: identity.principalId
    roleDefinitionId: contributorRole.id
    principalType: identity.principalType
  }
]

var resourceGroupRoleAssignmentName = '${resourceGroupName}-role'
module resourceGroupRoleAssignment './modules/security/resource-group-role-assignment.bicep' = {
  name: resourceGroupRoleAssignmentName
  scope: resourceGroup
  params: {
    roleAssignments: concat(contributorIdentityAssignments, [], allConfigDataOwnerIdentityAssignments)
  }
}

resource keyVaultSecretsUserRole 'Microsoft.Authorization/roleDefinitions@2022-05-01-preview' existing = {
  scope: resourceGroup
  name: roles.security.keyVaultSecretsUser
}

var keyVaultSecretsUserIdentityAssignments = [
  for identity in identities: {
    principalId: identity.principalId
    roleDefinitionId: keyVaultSecretsUserRole.id
    principalType: identity.principalType
  }
]

@description('Location for the Static Web App and Azure Function App. Only the following locations are allowed: centralus, eastus2, westeurope, westus2, southeastasia')
@allowed([
  'centralus'
  'eastus2'
  'westeurope'
  'westus2'
  'southeastasia'
])
param location string

@description('Location for the Azure OpenAI account')
@allowed([
  'East US'
  'East US 2'
  'France Central'
  'Germany West Central'
  'Japan East'
  'Korea Central'
  'North Central US'
  'Norway East'
  'Poland Central'
  'South Africa North'
  'South Central US'
  'South India'
  'Southeast Asia'
  'Spain Central'
  'Sweden Central'
  'Switzerland North'
  'Switzerland West'
  'UAE North'
  'UK South'
  'West Europe'
  'West US'
  'West US 3'
])
param aoaiLocation string

@description('Network isolation? If yes it will create the private endpoints.')
@allowed([true, false])
param networkIsolation bool = false
var _networkIsolation = networkIsolation

@minLength(6)
@maxLength(72)
@description('Test vm gpt user password. Use strong password with letters and numbers. Needed only when choosing network isolation and create bastion option. If not creating with network isolation you can write anything. Password must be between 6-72 characters long and must satisfy at least 3 of password complexity requirements from the following: 1-Contains an uppercase character, 2-Contains a lowercase character, 3-Contains a numeric digit, 4-Contains a special character, 5- Control characters are not allowed.')
@secure()
param vmUserInitialPassword string

@description('Deploy VM? If yes it will create the virtual machine to access the network isolated environment in the zero trust configuration.')
@allowed([true, false])
param deployVM bool = true
var _deployVM = deployVM

@description('Test vm gpt user name. Needed only when choosing network isolation and create bastion option. If not you can leave it blank.')
param vmUserName string = ''
var _vmUserName = !empty(vmUserName) ? vmUserName : 'gptrag'

// PricipalId that will have access to KeyVault secrets, this is automatically set by the 'azd' tool to the principal runing azd
@description('Id of the user or app to assign application roles')
param principalId string = ''

@description('The name of the Zero Trust VM. If left empty, a random name will be generated.')
param ztVmName string = ''
var _ztVmName = !empty(ztVmName) ? ztVmName : 'testvm-${suffix}'

@description('The name of the VM Key Vault Secret. If left empty, a random name will be generated.')
param vmKeyVaultSecName string = ''
var _vmKeyVaultSecName = !empty(vmKeyVaultSecName) ? vmKeyVaultSecName : 'vmUserInitialPassword'

@description('Settings to define reusable resources.')
var _azureReuseConfigDefaults = {
  aoaiReuse: false
  existingAoaiResourceGroupName: ''
  existingAoaiName: ''
  appInsightsReuse: false
  existingAppInsightsResourceGroupName: ''
  existingAppInsightsName: ''
  appConfigReuse: false
  existingAppConfigResourceGroupName: ''
  existingAppConfigName: ''
  logAnalyticsWorkspaceReuse: false  
  existingLogAnalyticsWorkspaceResourceId: ''
  appServicePlanReuse: false
  existingAppServicePlanResourceGroupName: ''
  existingAppServicePlanName: ''
  aiSearchReuse: false
  existingAiSearchResourceGroupName: ''
  existingAiSearchName: ''
  aiServicesReuse: false
  existingAiServicesResourceGroupName: ''
  existingAiServicesName: ''
  cosmosDbReuse: false
  existingCosmosDbResourceGroupName: ''
  existingCosmosDbAccountName: ''
  existingCosmosDbDatabaseName : ''
  keyVaultReuse: false
  existingKeyVaultResourceGroupName: ''
  existingKeyVaultName: ''
  storageReuse: false
  existingStorageResourceGroupName: ''
  existingStorageName: ''
  vnetReuse: false
  existingVnetResourceGroupName: ''
  existingVnetName: ''
  orchestratorFunctionAppReuse: false
  existingOrchestratorFunctionAppResourceGroupName: ''
  existingOrchestratorFunctionAppName: ''  
  dataIngestionFunctionAppReuse: false
  existingDataIngestionFunctionAppResourceGroupName: ''
  existingDataIngestionFunctionAppName: ''  
  appServiceReuse: false
  existingAppServiceName: ''
  existingAppServiceNameResourceGroupName: ''
  orchestratorFunctionAppStorageReuse: false
  existingOrchestratorFunctionAppStorageName: ''
  existingOrchestratorFunctionAppStorageResourceGroupName: ''
  dataIngestionFunctionAppStorageReuse: false
  existingDataIngestionFunctionAppStorageName: ''
  existingDataIngestionFunctionAppStorageResourceGroupName: ''  
}

param azureReuseConfig object = {} 
var _azureReuseConfig = union(_azureReuseConfigDefaults, {
    aoaiReuse: (empty(azureReuseConfig.aoaiReuse) ? _azureReuseConfigDefaults.aoaiReuse : toLower(azureReuseConfig.aoaiReuse) == 'true')
    existingAoaiResourceGroupName: (empty(azureReuseConfig.existingAoaiResourceGroupName) ? _azureReuseConfigDefaults.existingAoaiResourceGroupName : azureReuseConfig.existingAoaiResourceGroupName)
    existingAoaiName: (empty(azureReuseConfig.existingAoaiName) ? _azureReuseConfigDefaults.existingAoaiName : azureReuseConfig.existingAoaiName)
    aiServicesReuse: (empty(azureReuseConfig.aiServicesReuse) ? _azureReuseConfigDefaults.aiServicesReuse : toLower(azureReuseConfig.aiServicesReuse) == 'true')
    existingAiServicesResourceGroupName: (empty(azureReuseConfig.existingAiServicesResourceGroupName) ? _azureReuseConfigDefaults.existingAiServicesResourceGroupName : azureReuseConfig.existingAiServicesResourceGroupName)
    existingAiServicesName: (empty(azureReuseConfig.existingAiServicesName) ? _azureReuseConfigDefaults.existingAiServicesName : azureReuseConfig.existingAiServicesName)
    //appConfigReuse: (empty(azureReuseConfig.appConfigReuse) ? _azureReuseConfigDefaults.appConfigReuse : toLower(azureReuseConfig.appConfigReuse) == 'true')
    //existingAppConfigResourceGroupName: (empty(azureReuseConfig.existingAppConfigResourceGroupName) ? _azureReuseConfigDefaults.existingAppConfigResourceGroupName : azureReuseConfig.existingAppConfigResourceGroupName)
    //existingAppConfigName: (empty(azureReuseConfig.existingAppConfigName) ? _azureReuseConfigDefaults.existingAppConfigName : azureReuseConfig.existingAppConfigName)
    appConfigReuse: false
    existingAppConfigResourceGroupName: ''
    existingAppConfigName: ''
    appInsightsReuse: (empty(azureReuseConfig.appInsightsReuse) ? _azureReuseConfigDefaults.appInsightsReuse : toLower(azureReuseConfig.appInsightsReuse) == 'true')
    existingAppInsightsResourceGroupName: (empty(azureReuseConfig.existingAppInsightsResourceGroupName) ? _azureReuseConfigDefaults.existingAppInsightsResourceGroupName : azureReuseConfig.existingAppInsightsResourceGroupName)
    existingAppInsightsName: (empty(azureReuseConfig.existingAppInsightsName) ? _azureReuseConfigDefaults.existingAppInsightsName : azureReuseConfig.existingAppInsightsName)
    logAnalyticsWorkspaceReuse: (empty(azureReuseConfig.logAnalyticsWorkspaceReuse) ? _azureReuseConfigDefaults.logAnalyticsWorkspaceReuse : toLower(azureReuseConfig.logAnalyticsWorkspaceReuse) == 'true')
    existingLogAnalyticsWorkspaceResourceId: (empty(azureReuseConfig.existingLogAnalyticsWorkspaceResourceId) ? _azureReuseConfigDefaults.existingLogAnalyticsWorkspaceResourceId : azureReuseConfig.existingLogAnalyticsWorkspaceResourceId)
    appServicePlanReuse: (empty(azureReuseConfig.appServicePlanReuse) ? _azureReuseConfigDefaults.appServicePlanReuse : toLower(azureReuseConfig.appServicePlanReuse) == 'true')
    existingAppServicePlanResourceGroupName: (empty(azureReuseConfig.existingAppServicePlanResourceGroupName) ? _azureReuseConfigDefaults.existingAppServicePlanResourceGroupName : azureReuseConfig.existingAppServicePlanResourceGroupName)
    existingAppServicePlanName: (empty(azureReuseConfig.existingAppServicePlanName) ? _azureReuseConfigDefaults.existingAppServicePlanName : azureReuseConfig.existingAppServicePlanName)
    aiSearchReuse: (empty(azureReuseConfig.aiSearchReuse) ? _azureReuseConfigDefaults.aiSearchReuse : toLower(azureReuseConfig.aiSearchReuse) == 'true')
    existingAiSearchResourceGroupName: (empty(azureReuseConfig.existingAiSearchResourceGroupName) ? _azureReuseConfigDefaults.existingAiSearchResourceGroupName : azureReuseConfig.existingAiSearchResourceGroupName)
    existingAiSearchName: (empty(azureReuseConfig.existingAiSearchName) ? _azureReuseConfigDefaults.existingAiSearchName : azureReuseConfig.existingAiSearchName)
    cosmosDbReuse: (empty(azureReuseConfig.cosmosDbReuse) ? _azureReuseConfigDefaults.cosmosDbReuse : toLower(azureReuseConfig.cosmosDbReuse) == 'true')
    existingCosmosDbResourceGroupName: (empty(azureReuseConfig.existingCosmosDbResourceGroupName) ? _azureReuseConfigDefaults.existingCosmosDbResourceGroupName : azureReuseConfig.existingCosmosDbResourceGroupName)
    existingCosmosDbAccountName: (empty(azureReuseConfig.existingCosmosDbAccountName) ? _azureReuseConfigDefaults.existingCosmosDbAccountName : azureReuseConfig.existingCosmosDbAccountName)
    existingCosmosDbDatabaseName: (empty(azureReuseConfig.existingCosmosDbDatabaseName) ? _azureReuseConfigDefaults.existingCosmosDbDatabaseName : azureReuseConfig.existingCosmosDbDatabaseName)
    keyVaultReuse: (empty(azureReuseConfig.keyVaultReuse) ? _azureReuseConfigDefaults.keyVaultReuse : toLower(azureReuseConfig.keyVaultReuse) == 'true')
    existingKeyVaultResourceGroupName: (empty(azureReuseConfig.existingKeyVaultResourceGroupName) ? _azureReuseConfigDefaults.existingKeyVaultResourceGroupName : azureReuseConfig.existingKeyVaultResourceGroupName)
    existingKeyVaultName: (empty(azureReuseConfig.existingKeyVaultName) ? _azureReuseConfigDefaults.existingKeyVaultName : azureReuseConfig.existingKeyVaultName)
    storageReuse: (empty(azureReuseConfig.storageReuse) ? _azureReuseConfigDefaults.storageReuse : toLower(azureReuseConfig.storageReuse) == 'true')
    existingStorageResourceGroupName: (empty(azureReuseConfig.existingStorageResourceGroupName) ? _azureReuseConfigDefaults.existingStorageResourceGroupName : azureReuseConfig.existingStorageResourceGroupName)
    existingStorageName: (empty(azureReuseConfig.existingStorageName) ? _azureReuseConfigDefaults.existingStorageName : azureReuseConfig.existingStorageName)
    vnetReuse: (empty(azureReuseConfig.vnetReuse) ? _azureReuseConfigDefaults.vnetReuse : toLower(azureReuseConfig.vnetReuse) == 'true')
    existingVnetResourceGroupName: (empty(azureReuseConfig.existingVnetResourceGroupName) ? _azureReuseConfigDefaults.existingVnetResourceGroupName : azureReuseConfig.existingVnetResourceGroupName)
    existingVnetName: (empty(azureReuseConfig.existingVnetName) ? _azureReuseConfigDefaults.existingVnetName : azureReuseConfig.existingVnetName)
    orchestratorFunctionAppReuse: (empty(azureReuseConfig.orchestratorFunctionAppReuse) ? _azureReuseConfigDefaults.orchestratorFunctionAppReuse: toLower(azureReuseConfig.orchestratorFunctionAppReuse) == 'true')
    existingOrchestratorFunctionAppResourceGroupName: (empty(azureReuseConfig.existingOrchestratorFunctionAppResourceGroupName) ? _azureReuseConfigDefaults.existingOrchestratorFunctionAppResourceGroupName : azureReuseConfig.existingOrchestratorFunctionAppResourceGroupName)
    existingOrchestratorFunctionAppName: (empty(azureReuseConfig.existingOrchestratorFunctionAppName) ? _azureReuseConfigDefaults.existingOrchestratorFunctionAppName : azureReuseConfig.existingOrchestratorFunctionAppName)
    dataIngestionFunctionAppReuse: (empty(azureReuseConfig.dataIngestionFunctionAppReuse) ? _azureReuseConfigDefaults.dataIngestionFunctionAppReuse : toLower(azureReuseConfig.dataIngestionFunctionAppReuse) == 'true')
    existingDataIngestionFunctionAppResourceGroupName: (empty(azureReuseConfig.existingDataIngestionFunctionAppResourceGroupName) ? _azureReuseConfigDefaults.existingDataIngestionFunctionAppResourceGroupName : azureReuseConfig.existingDataIngestionFunctionAppResourceGroupName)
    existingDataIngestionFunctionAppName: (empty(azureReuseConfig.existingDataIngestionFunctionAppName) ? _azureReuseConfigDefaults.existingDataIngestionFunctionAppName : azureReuseConfig.existingDataIngestionFunctionAppName)
    appServiceReuse: (empty(azureReuseConfig.appServiceReuse) ? _azureReuseConfigDefaults.appServiceReuse : toLower(azureReuseConfig.appServiceReuse) == 'true')
    existingAppServiceName: (empty(azureReuseConfig.existingAppServiceName) ? _azureReuseConfigDefaults.existingAppServiceName : azureReuseConfig.existingAppServiceName)
    existingAppServiceNameResourceGroupName: (empty(azureReuseConfig.existingAppServiceNameResourceGroupName) ? _azureReuseConfigDefaults.existingAppServiceNameResourceGroupName : azureReuseConfig.existingAppServiceNameResourceGroupName)
    orchestratorFunctionAppStorageReuse: (empty(azureReuseConfig.orchestratorFunctionAppStorageReuse) ? _azureReuseConfigDefaults.orchestratorFunctionAppStorageReuse : toLower(azureReuseConfig.orchestratorFunctionAppStorageReuse) == 'true')
    existingOrchestratorFunctionAppStorageName: (empty(azureReuseConfig.existingOrchestratorFunctionAppStorageName) ? _azureReuseConfigDefaults.existingOrchestratorFunctionAppStorageName : azureReuseConfig.existingOrchestratorFunctionAppStorageName)
    existingOrchestratorFunctionAppStorageResourceGroupName: (empty(azureReuseConfig.existingOrchestratorFunctionAppStorageResourceGroupName) ? _azureReuseConfigDefaults.existingOrchestratorFunctionAppStorageResourceGroupName : azureReuseConfig.existingOrchestratorFunctionAppStorageResourceGroupName)
    dataIngestionFunctionAppStorageReuse: (empty(azureReuseConfig.dataIngestionFunctionAppStorageReuse) ? _azureReuseConfigDefaults.dataIngestionFunctionAppStorageReuse : toLower(azureReuseConfig.dataIngestionFunctionAppStorageReuse) == 'true')
    existingDataIngestionFunctionAppStorageName: (empty(azureReuseConfig.existingDataIngestionFunctionAppStorageName) ? _azureReuseConfigDefaults.existingDataIngestionFunctionAppStorageName : azureReuseConfig.existingDataIngestionFunctionAppStorageName)
    existingDataIngestionFunctionAppStorageResourceGroupName: (empty(azureReuseConfig.existingDataIngestionFunctionAppStorageResourceGroupName) ? _azureReuseConfigDefaults.existingDataIngestionFunctionAppStorageResourceGroupName : azureReuseConfig.existingDataIngestionFunctionAppStorageResourceGroupName)
  }
)

// flag that indicates if we're reusing a vnet
var _vnetReuse = _azureReuseConfig.vnetReuse

@description('Virtual network name, you can leave as it is to generate a random name.')
param vnetName string = ''
var _vnetName = _azureReuseConfig.vnetReuse ? _azureReuseConfig.existingVnetName : !empty(vnetName) ? vnetName : 'aivnet-${suffix}'

@description('Address space for the virtual network')
param vnetAddress string = ''
var _vnetAddress = !empty(vnetAddress) ? vnetAddress : '10.0.0.0/23'

@description('Forked Git repository URL for the Static Web App')
param user_gh_url string = ''
param userPrincipalId string

// Environment name. This is automatically set by the 'azd' tool.
@description('Environment name used as a tag for all resources. This is directly mapped to the azd-environment.')
// param environmentName string = 'dev'
var functionAppName = '${abbrs.compute.functionApp}${suffix}'
var staticWebAppName = '${abbrs.compute.staticWebApp}${suffix}'
var storageAccountName = '${abbrs.storage.storageAccount}${suffix}'
var keyVaultName = '${abbrs.security.keyVault}${suffix}'
var aoaiName = '${abbrs.ai.openAIService}${suffix}'
var aiServicesName = '${abbrs.ai.aiServices}${suffix}'
var cosmosAccountName = '${abbrs.databases.cosmosDBDatabase}${suffix}'
var aiMultiServicesName = '${abbrs.ai.aiMultiServices}${suffix}'
var appInsightsName = '${abbrs.managementGovernance.applicationInsights}${suffix}'
var logAnalyticsName = '${abbrs.managementGovernance.logAnalyticsWorkspace}${suffix}'
var appConfigName = '${abbrs.configuration.appConfiguration}${suffix}'

var promptsContainer = 'promptscontainer'
var configContainerName = 'config'
var cosmosDatabaseName = 'openaiPromptsDB'

@description('Deploy a Static Web App front end? Set to true to deploy, false to skip.')
param deployStaticWebApp bool

@description('The name of the Azure Configuration Private Endpoint. If left empty, a random name will be generated.')
param azureAppConfigPe string = ''
var _azureAppConfigPe = !empty(azureAppConfigPe) ? azureAppConfigPe : 'appconfigpe-${suffix}'

@description('The name of the Azure AI Services Private Endpoint. If left empty, a random name will be generated.')
param azureAiServicesPe string = ''
var _azureAiServicesPe = !empty(azureAiServicesPe) ? azureAiServicesPe : 'aiServicesPe-${suffix}'

@description('The name of the Azure Cosmos DB Private Endpoint. If left empty, a random name will be generated.')
param azureDbAccountPe string = ''
var _azureDbAccountPe = !empty(azureDbAccountPe) ? azureDbAccountPe : 'dbgptPe-${suffix}'

@description('The name of the Azure AI Services Private Endpoint. If left empty, a random name will be generated.')
param azureAiMultiServicesPe string = ''
var _azureAiMultiServicesPe = !empty(azureAiServicesPe) ? azureAiServicesPe : 'aiMultiServicesPe-${suffix}'

@description('The name of the Azure Storage Account Private Endpoint. If left empty, a random name will be generated.')
param azureStorageAccountPe string = ''
var _azureStorageAccountPe = !empty(azureStorageAccountPe) ? azureStorageAccountPe : 'stragpe-${suffix}'

@description('The name of the Azure Storage Account Private Endpoint. If left empty, a random name will be generated.')
param funcAppPe string = ''
var _functionAppPe = !empty(funcAppPe) ? funcAppPe : 'funcapppe-${suffix}'

@description('The name of the Azure Key Vault Private Endpoint. If left empty, a random name will be generated.')
param azureKeyvaultPe string = ''
var _azureKeyvaultPe = !empty(azureKeyvaultPe) ? azureKeyvaultPe : 'kvpe-${suffix}'

resource resourceGroup 'Microsoft.Resources/resourceGroups@2024-03-01' = {
  name: _resourceGroupName
  location: location
  tags: union(tags, {})
}

module logAnalyticsWorkspace './modules/management_governance/log-analytics-workspace.bicep' = {
  scope : resourceGroup
  name: logAnalyticsName
  params: {
    name: logAnalyticsName
    location: location
    //appInsightsReuse : false
    //existingAppInsightsResourceGroupName : resourceGroup().name
    retentionInDays: 30
  }
}

// App Insights Module
module appInsights './modules/management_governance/application-insights.bicep' = {
  scope : resourceGroup
  name: appInsightsName
  params: {
    name: appInsightsName
    location: location
    appInsightsReuse : false
    logAnalyticsReuse: false
    existingAppInsightsResourceGroupName : resourceGroup.name
    logAnalyticsWorkspaceId: logAnalyticsWorkspace.outputs.id
    suffix : suffix
  }
}

var secureAppSettings = [
  {
    name: 'OPENAI_API_KEY'
    value: aoai.outputs.AOAI_API_KEY
  }
]

var appSettings = [
  {
    name: 'APPLICATIONINSIGHTS_CONNECTION_STRING'
    value: appInsights.outputs.connectionString
  }
  {
    name: 'STORAGE_ACCOUNT_NAME'
    value : storageAccountName
  }
  {
    name: 'BLOB_ENDPOINT'
    value: 'https://${storageAccountName}.blob.${environment().suffixes.storage}'
  }
  {
    name: 'PROMPT_FILE'
    value: 'prompts.yaml'
  }
  {
    name: 'OPENAI_API_VERSION'
    value: '2024-05-01-preview'
  }
  {
    name: 'OPENAI_API_BASE'
    value: aoai.outputs.AOAI_ENDPOINT
  }
  {
    name: 'OPENAI_API_EMBEDDING_MODEL'
    value: 'text-embedding-ada-002'
  }
  {
    name: 'OPENAI_MODEL'
    value: 'gpt-4o'
  }
  {
    name: 'COSMOS_DB_PROMPTS_CONTAINER'
    value: 'promptscontainer'
  }
  {
    name: 'COSMOS_DB_PROMPTS_DB'
    value: 'openaiPromptsDB'
  }
  {
    name: 'COSMOS_DB_CONFIG_CONTAINER'
    value: 'config'
  }
  {
    name: 'COSMOS_DB_URI'
    value: 'https://${cosmos.outputs.accountName}.documents.azure.com:443/'
  }
  {
    name: 'AIMULTISERVICES_ENDPOINT'
    value: aiMultiServices.outputs.aiMultiServicesEndpoint
  }
]

module vaultDnsZone './modules/network/private-dns-zones.bicep' = if (_networkIsolation && !_vnetReuse) {
  scope : resourceGroup
  name: 'vault-dnzones'
  params: {
    dnsZoneName: 'privatelink.vaultcore.azure.net' 
    tags: tags
    virtualNetworkName: _networkIsolation?vnet.outputs.name:''
  }
}

module keyvaultpe './modules/network/private-endpoint.bicep' = if (_networkIsolation && !_vnetReuse) {
  scope : resourceGroup
  name: 'keyvaultpe'
  params: {
    location: location
    name: _azureKeyvaultPe
    tags: tags
    subnetId: _networkIsolation?vnet.outputs.aiSubId:''
    serviceId: keyVault.outputs.id
    groupIds: ['Vault']
    dnsZoneId: _networkIsolation?vaultDnsZone.outputs.id:''
  }
}

// 1. Key Vault
module keyVault './modules/security/key-vault.bicep' = {
  scope : resourceGroup
  name: 'keyVaultModule'
  params: {
    name: keyVaultName
    location: location
    //tenantId: tenantId
    keyVaultReuse: _azureReuseConfig.keyVaultReuse
    existingKeyVaultResourceGroupName: resourceGroupName
    secureAppSettings: secureAppSettings
    publicNetworkAccess: _networkIsolation?'Disabled':'Enabled'
    roleAssignments: concat(keyVaultSecretsUserIdentityAssignments, [])
  }
}

module keyVaultAccessPolicies './modules/rbac/keyvault-access.bicep' = {
  scope : resourceGroup
  name: 'keyvault-access-${keyVaultName}'
  params: {
    permissions: {
      secrets: [ 'get', 'list', 'set', 'delete' ]
    }
    principalId: functionApp.outputs.identityPrincipalId
    resourceName: keyVaultName
  }
}

module aiservicesDnsZone './modules/network/private-dns-zones.bicep' = if (_networkIsolation && !_vnetReuse) {
  scope : resourceGroup
  name: 'aiservices-dnzones'
  params: {
    dnsZoneName: 'privatelink.cognitiveservices.azure.com' 
    tags: tags
    virtualNetworkName: _networkIsolation?vnet.outputs.name:''
  }
}

module aiServicesPe './modules/network/private-endpoint.bicep' = if (_networkIsolation && !_vnetReuse) {
  scope : resourceGroup
  name: 'aiServicesPe'
  params: {
    location: location
    name: _azureAiServicesPe
    tags: tags
    subnetId: _networkIsolation?vnet.outputs.aiSubId:''
    serviceId: aoai.outputs.id
    groupIds: ['account']
    dnsZoneId: _networkIsolation?aiservicesDnsZone.outputs.id:''
  }
}

// 2. OpenAI
module aoai './modules/ai_ml/aoai.bicep' = {
  scope : resourceGroup
  name: 'aoaiModule'
  params: {
    location: aoaiLocation
    name: aoaiName
    aiServicesName: aiServicesName
    publicNetworkAccess: _networkIsolation?'Disabled':'Enabled'
  }
}

module documentsDnsZone './modules/network/private-dns-zones.bicep' = if (_networkIsolation && !_vnetReuse) {
  scope : resourceGroup
  name: 'documents-dnzones'
  params: {
    dnsZoneName: 'privatelink.documents.azure.com' 
    tags: tags
    virtualNetworkName: _networkIsolation?vnet.outputs.name:''
  }
}

module cosmospe './modules/network/private-endpoint.bicep' = if (_networkIsolation && !_vnetReuse) {
  scope : resourceGroup
  name: 'cosmospe'
  params: {
    location: location
    name: _azureDbAccountPe
    tags: tags
    subnetId: _networkIsolation?vnet.outputs.databaseSubId:''
    serviceId: cosmos.outputs.id
    groupIds: ['Sql']
    dnsZoneId: _networkIsolation?documentsDnsZone.outputs.id:''
  }
}

// 4. Cosmos DB
module cosmos './modules/db/cosmos.bicep' = {
  scope : resourceGroup
  name: 'cosmosModule'
  params: {
    location: location
    accountName: cosmosAccountName
    databaseName: cosmosDatabaseName
    containerName: promptsContainer
    configContainerName: configContainerName
    conversationContainerName: promptsContainer
    cosmosDbReuse: _azureReuseConfig.cosmosDbReuse
    datasourcesContainerName: configContainerName
    existingCosmosDbAccountName: _azureReuseConfig.existingCosmosDbAccountName
    existingCosmosDbResourceGroupName: _azureReuseConfig.existingCosmosDbResourceGroupName
    keyVaultName: keyVault.outputs.name
  }
}

module vnet './modules/network/vnet.bicep' = if (_networkIsolation && !_vnetReuse) {
  scope : resourceGroup
  name: 'virtual-network'
  params: {
    location: location
    vnetName: _vnetName
    vnetReuse: _vnetReuse
    existingVnetResourceGroupName: _azureReuseConfig.existingVnetResourceGroupName
    tags: tags
    vnetAddress: _vnetAddress
    appServicePlanId: functionApp.outputs.hostingPlanId
    appServicePlanName: functionApp.outputs.hostingPlanName
  }
}


module appConfigDnsZone './modules/network/private-dns-zones.bicep' = if (_networkIsolation && !_vnetReuse) {
  scope : resourceGroup
  name: 'appconfig-dnzones'
  //scope: resourceGroup
  params: {
    dnsZoneName: 'privatelink.azconfig.io' 
    tags: tags
    virtualNetworkName: _networkIsolation?vnet.outputs.name:''
  }
}

module appConfigPe './modules/network/private-endpoint.bicep' = if (_networkIsolation && !_vnetReuse) {
  scope : resourceGroup
  name: 'appConfigPe'
  params: {
    location: location
    name: _azureAppConfigPe
    tags: tags
    subnetId: _networkIsolation?vnet.outputs.aiSubId:''
    serviceId: appConfig.outputs.id
    groupIds: ['configurationStores']
    dnsZoneId: _networkIsolation?appConfigDnsZone.outputs.id:''
  }
}

var appConfigurationManagedIdentityName = '${abbrs.security.managedIdentity}${abbrs.configuration.appConfiguration}${suffix}'
module applicationManagedIdentity './modules/security/managed-identity.bicep' = {
  scope: resourceGroup
  name: appConfigurationManagedIdentityName
  params: {
    name: appConfigurationManagedIdentityName
    location: location
    tags: union(tags, {})
  }
}

module appConfig './modules/app_config/appconfig.bicep' = {
  scope : resourceGroup
  name: 'appconfig'
  params: {
    name : appConfigName
    //administratorObjectId: principalId
    //administratorPrincipalType: 'User'
    //actionGroupId: ''
    appSettings: appSettings
    secureAppSettings: keyVault.outputs.secrets
    location: location
    tags: tags
    identityId: applicationManagedIdentity.outputs.id
    //logAnalyticsWorkspaceResourceId: _azureReuseConfig.existingLogAnalyticsWorkspaceResourceId ?? ''
    //vaultName: keyVault.outputs.name
    //privateDnsZones: []
    resourceToken: suffix
    //timestamp: ''
    //subnetId: (_networkIsolation && !_vnetReuse)?vnet.outputs.appIntSubId:''
    //uaiId: ''  //uaiAppConfig.id
    publicNetworkAccess: _networkIsolation?'Disabled':'Enabled'
  }
}

module blobDnsZone './modules/network/private-dns-zones.bicep' = if (_networkIsolation && !_vnetReuse) {
  scope : resourceGroup
  name: 'blob-dnzones'
  params: {
    dnsZoneName: 'privatelink.blob.core.windows.net' 
    tags: tags
    virtualNetworkName: _networkIsolation?vnet.outputs.name:''
  }
}

module storage './modules/storage/storage-account.bicep' = {
  scope : resourceGroup
  name: 'storage'
  params: {
    name: storageAccountName
    location: location
    storageReuse: _azureReuseConfig.storageReuse
    existingStorageResourceGroupName: _azureReuseConfig.existingStorageResourceGroupName
    tags: tags
    publicNetworkAccess: _networkIsolation?'Disabled':'Enabled'
    allowBlobPublicAccess: false // Disable anonymous access
    containers: [
      { name: 'bronze', publicAccess: 'None' }
      { name: 'silver', publicAccess: 'None' }
      { name: 'gold', publicAccess: 'None' }      
      { name: 'prompts', publicAccess: 'None' }      
    ]
    deleteRetentionPolicy: {
      enabled: true
      days: 7
    }
  }  
}

module storagepe './modules/network/private-endpoint.bicep' = if (_networkIsolation && !_vnetReuse) {
  scope : resourceGroup
  name: 'storagepe'
  params: {
    location: location
    name: _azureStorageAccountPe
    tags: tags
    subnetId: _networkIsolation?vnet.outputs.aiSubId:''
    serviceId: storage.outputs.id
    groupIds: ['blob']
    dnsZoneId: _networkIsolation?blobDnsZone.outputs.id:''
  }
}

module websitesDnsZone './modules/network/private-dns-zones.bicep' = if (_networkIsolation && !_vnetReuse) {
  scope : resourceGroup
  name: 'websites-dnzones'
  params: {
    dnsZoneName: 'privatelink.azurewebsites.net' 
    tags: tags
    virtualNetworkName: _networkIsolation?vnet.outputs.name:''
  }
}

module functionAppPe './modules/network/private-endpoint.bicep' = if (_networkIsolation && !_vnetReuse) {
  scope : resourceGroup
  name: 'functionAppPe'
  params: {
    location: location
    name: _functionAppPe
    tags: tags
    subnetId: _networkIsolation?vnet.outputs.appServicesSubId:''
    serviceId: functionApp.outputs.id
    groupIds: ['sites']
    dnsZoneId: _networkIsolation?websitesDnsZone.outputs.id:''
  }
}

// 3. FunctionApp
module functionApp './modules/compute/functionApp.bicep' = {
  scope : resourceGroup
  name: functionAppName
  params: {
    appName: functionAppName
    location: location
    storageAccountName: storageAccountName
    aoaiEndpoint: aoai.outputs.AOAI_ENDPOINT
    appConfigName: appConfig.outputs.name
    suffix : suffix
    tags: tags
  }
}

module functionAppConfigAccess './modules/rbac/appconfig-access.bicep' = {
  scope : resourceGroup
  name: 'functionappconfigroleassignment'
  params: {
    resourceName: appConfig.outputs.name
    principalId: functionApp.outputs.identityPrincipalId
  }
}

// 5. Static Web App
module staticWebApp './modules/apps/staticWebapp.bicep' = if (deployStaticWebApp) {
  scope : resourceGroup
  name: 'staticWebAppModule'
  params: {
    staticWebAppName: staticWebAppName
    functionAppResourceId: functionApp.outputs.id
    user_gh_url: user_gh_url
    location: location
    cosmosId: cosmos.outputs.cosmosResourceId
    appConfigName: appConfig.outputs.name
    suffix : suffix
    tags: tags
  }
}

module staticWebAppConfigAccess './modules/rbac/appconfig-access.bicep' = {
  scope : resourceGroup
  name: 'staticwebappappconfigroleassignment'
  params: {
    resourceName: appConfig.outputs.name
    principalId: staticWebApp.outputs.identityPrincipalId
  }
}

module storageAccountAccess './modules/rbac/blob-dataowner.bicep' = {
  scope : resourceGroup
  name: 'staticwebstorageroleassignment'
  params: {
    resourceName: storage.outputs.name
    principalId: staticWebApp.outputs.identityPrincipalId
  }
}

var aiMultiServiceManagedIdentityName = '${abbrs.security.managedIdentity}${abbrs.ai.aiMultiServices}${suffix}'
module aiMultiServiceManagedIdentity './modules/security/managed-identity.bicep' = {
  scope: resourceGroup
  name: aiMultiServiceManagedIdentityName
  params: {
    name: aiMultiServiceManagedIdentityName
    location: location
    tags: union(tags, {})
  }
}

module aiMultiServicesPe './modules/network/private-endpoint.bicep' = if (_networkIsolation && !_vnetReuse) {
  scope : resourceGroup
  name: 'aiMultiServicesPe'
  params: {
    location: location
    name: _azureAiMultiServicesPe
    tags: tags
    subnetId: _networkIsolation?vnet.outputs.aiSubId:''
    serviceId: aiMultiServices.outputs.id
    groupIds: ['account']
    dnsZoneId: _networkIsolation?aiservicesDnsZone.outputs.id:''
  }
}

// 6. Azure AI Multi Services
module aiMultiServices './modules/ai_ml/aimultiservices.bicep' = {
  scope : resourceGroup
  name: 'aiMultiServicesModule'
  params: {
    aiMultiServicesName: aiMultiServicesName
    location: location
    identityId: aiMultiServiceManagedIdentity.outputs.id
    publicNetworkAccess: _networkIsolation?'Disabled':'Enabled'
  }
}

// Invoke the role assignment module for Storage Queue Data Contributor
module cosmosContributor './modules/rbac/cosmos-contributor.bicep' = {
  name: 'cosmosContributorModule'
  scope: resourceGroup // Role assignment applies to the storage account
  params: {
    principalId: functionApp.outputs.identityPrincipalId
    resourceName: cosmos.outputs.accountName
  }
}

// Invoke the role assignment module for Storage Queue Data Contributor
module cosmosContributorUser './modules/rbac/cosmos-contributor.bicep' = {
  name: 'cosmosContributorUserModule'
  scope: resourceGroup // Role assignment applies to the storage account
  params: {
    principalId: userPrincipalId
    resourceName: cosmos.outputs.accountName
  }
}

// Invoke the role assignment module for Storage Blob Data Contributor
module blobStorageDataContributor './modules/rbac/blob-contributor.bicep' = {
  name: 'blobRoleAssignmentModule'
  scope: resourceGroup // Role assignment applies to the storage account
  params: {
    principalId: functionApp.outputs.identityPrincipalId
    resourceName: functionApp.outputs.storageAccountName
  }
}

// Invoke the role assignment module for Storage Queue Data Contributor
module blobQueueContributor './modules/rbac/blob-queue-contributor.bicep' = {
  name: 'blobQueueAssignmentModule'
  scope: resourceGroup // Role assignment applies to the storage account
  params: {
    principalId: functionApp.outputs.identityPrincipalId
    resourceName: functionApp.outputs.storageAccountName
  }
}

// Invoke the role assignment module for Storage Queue Data Contributor
module aiServicesOpenAIUser './modules/rbac/cogservices-openai-user.bicep' = {
  name: 'aiServicesOpenAIUserModule'
  scope: resourceGroup // Role assignment applies to the storage account
  params: {
    principalId: functionApp.outputs.identityPrincipalId
    resourceName: aoai.outputs.name
  }
}

// Invoke the role assignment module for Azure AI Multi Services User
module aiMultiServicesUser './modules/rbac/aiservices-user.bicep' = {
  name: 'aiMultiServicesUserModule'
  scope: resourceGroup // Role assignment applies to the Azure Function App
  params: {
    principalId: functionApp.outputs.identityPrincipalId
    resourceName: aiMultiServices.outputs.aiMultiServicesName
  }
}

// Invoke the role assignment module for Storage Queue Data Contributor
module blobContributor './modules/rbac/blob-contributor.bicep' = if (userPrincipalId != '') {
  name: 'blobStorageUserAssignmentModule'
  scope: resourceGroup // Role assignment applies to the storage account
  params: {
    principalId: userPrincipalId
    resourceName: functionApp.outputs.storageAccountName
    principalType: 'User'
  }
}

module testvm './modules/vm/dsvm.bicep' = if (_networkIsolation && !_vnetReuse && _deployVM)  {
  scope : resourceGroup
  name: 'testvm'
  params: {
    location: location
    name: _ztVmName
    tags: tags
    subnetId: _networkIsolation?vnet.outputs.aiSubId:''
    bastionSubId: _networkIsolation?vnet.outputs.bastionSubId:''
    vmUserPassword: vmUserInitialPassword
    vmUserName: _vmUserName
    keyVaultName: keyVault.outputs.name
    // this is the named of the secret to store the vm password in keyvault. It matches what is used on main.parameters.json
    vmUserPasswordKey: _vmKeyVaultSecName
    principalId: principalId
  }
}

output RESOURCE_GROUP string = resourceGroup.name
output FUNCTION_APP_NAME string = functionApp.outputs.name
output AZURE_STORAGE_ACCOUNT string = functionApp.outputs.storageAccountName
output FUNCTION_URL string = functionApp.outputs.uri
output BLOB_ENDPOINT string = functionApp.outputs.blobEndpoint
output PROMPT_FILE string = functionApp.outputs.promptFile
output OPENAI_API_VERSION string = functionApp.outputs.openaiApiVersion
output OPENAI_API_BASE string = functionApp.outputs.openaiApiBase
output OPENAI_MODEL string = functionApp.outputs.openaiModel
output FUNCTIONS_WORKER_RUNTIME string = functionApp.outputs.functionWorkerRuntime
output STATIC_WEB_APP_NAME string = deployStaticWebApp ? staticWebApp.outputs.name : '0'
output COSMOS_DB_PROMPTS_CONTAINER string = promptsContainer
output COSMOS_DB_CONFIG_CONTAINER string = configContainerName
output COSMOS_DB_PROMPTS_DB string = cosmosDatabaseName
output COSMOS_DB_ACCOUNT_NAME string = cosmos.outputs.accountName
output COSMOS_DB_URI string = 'https://${cosmosAccountName}.documents.azure.com:443/'
output AIMULTISERVICES_NAME string = aiMultiServices.outputs.aiMultiServicesName
output AIMULTISERVICES_ENDPOINT string = aiMultiServices.outputs.aiMultiServicesEndpoint
